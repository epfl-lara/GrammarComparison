package equivalence
import grammar._
import repair._
import parsing._
import generators._
import CFGrammar._
import EBNFGrammar._
import BNFConverter._

sealed abstract class EquivalenceResult[T]
//object PossiblyEquivalent extends EquivalenceResult { 
//  override def toString = "Possibly correct!" 
//}
//object Aborted extends EquivalenceResult {
//  override def toString = "Operation aborted"
//}
case class NotEquivalentNotAcceptedBySolution[T](unparsableWord: List[Terminal[T]]) extends EquivalenceResult[T] {
  override def toString = "\"" + unparsableWord.mkString(" ") + "\"" + " is not accepted by the solution!"
}
case class NotEquivalentGeneratedBySolution[T](ungeneratableWord: List[Terminal[T]]) extends EquivalenceResult[T] {
  override def toString = "\"" + ungeneratableWord.mkString(" ") + "\"" + " is generated by the solution!"
}

abstract class EquivalenceChecker[T] {

  val refg: Grammar[T]
  val refParser : Parser[T]   

  def isEquivalentTo(g2: Grammar[T]) : List[EquivalenceResult[T]]   

  def isSuperset(g2: Grammar[T]) : List[Word[T]] 
 
  //g2 is subset of refg
  def isSubset(g2: Grammar[T]) : List[Word[T]]
  
  def getRefWords() : List[Word[T]]
}