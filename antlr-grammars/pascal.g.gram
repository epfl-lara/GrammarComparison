program ->   programHeading block DOT 
programHeading ->   PROGRAM identifier (LPAREN identifierList RPAREN)? SEMI 
identifier ->   IDENTIFIER 
block ->   ( labelDeclarationPart | constantDefinitionPart | typeDefinitionPart | variableDeclarationPart | procedureAndFunctionDeclarationPart  )* compoundStatement 
labelDeclarationPart ->   LABEL label ( COMMA label )* SEMI 
label ->   unsignedInteger 
constantDefinitionPart ->   CONST constantDefinition ( SEMI constantDefinition )* SEMI 
constantDefinition ->   identifier EQUAL constant 
constant ->   unsignedNumber | sign unsignedNumber | identifier | sign identifier | string 
unsignedNumber ->   unsignedInteger | unsignedReal 
unsignedInteger ->   UNSIGNED_INT 
unsignedReal ->   UNSIGNED_REAL 
sign ->   PLUS | MINUS 
string ->   STRING 
typeDefinitionPart ->   TYPE typeDefinition ( SEMI typeDefinition )* SEMI 
typeDefinition ->   identifier EQUAL ( type | functionType | procedureType ) 
functionType ->   FUNCTION (formalParameterList)? COLON resultType 
procedureType ->   PROCEDURE (formalParameterList)? 
type ->   simpleType | structuredType | pointerType 
simpleType ->   scalarType | subrangeType | typeIdentifier 
scalarType ->   LPAREN identifierList RPAREN 
subrangeType ->   constant DOTDOT constant 
typeIdentifier ->   identifier 
structuredType ->   PACKED unpackedStructuredType | unpackedStructuredType 
unpackedStructuredType ->   arrayType | recordType | setType | fileType 
arrayType ->   ARRAY LBRACK typeList RBRACK OF componentType 
typeList ->   indexType ( COMMA indexType )*  
indexType ->   simpleType 
componentType ->   type 
recordType ->   RECORD fieldList END 
fieldList ->   (	fixedPart ( SEMI variantPart | SEMI )? | variantPart ) 
fixedPart ->   recordSection ( SEMI recordSection )* 
recordSection ->   identifierList COLON type 
variantPart ->   CASE tag OF variant ( SEMI variant | SEMI )* 
tag ->   identifier COLON typeIdentifier | typeIdentifier 
variant ->   constList COLON LPAREN fieldList RPAREN 
setType ->   SET OF baseType 
baseType ->   simpleType 
fileType ->   SFILE OF type | SFILE 
pointerType ->   POINTER typeIdentifier 
variableDeclarationPart ->   VAR variableDeclaration ( SEMI variableDeclaration )* SEMI 
variableDeclaration ->   identifierList COLON type 
procedureAndFunctionDeclarationPart ->   procedureOrFunctionDeclaration SEMI 
procedureOrFunctionDeclaration ->   procedureDeclaration | functionDeclaration 
procedureDeclaration ->   PROCEDURE identifier (formalParameterList)? SEMI block 
formalParameterList ->   LPAREN formalParameterSection ( SEMI formalParameterSection )* RPAREN 
formalParameterSection ->   parameterGroup | VAR parameterGroup | FUNCTION parameterGroup | PROCEDURE parameterGroup 
parameterGroup ->   identifierList COLON typeIdentifier 
identifierList ->   identifier ( COMMA identifier )* 
constList ->   constant ( COMMA constant )* 
functionDeclaration ->   FUNCTION identifier (formalParameterList)? COLON resultType SEMI block 
resultType ->   typeIdentifier 
statement ->   label COLON unlabelledStatement | unlabelledStatement 
unlabelledStatement ->   simpleStatement | structuredStatement 
simpleStatement ->   assignmentStatement | procedureStatement | gotoStatement | emptyStatement 
assignmentStatement ->   variable ASSIGN expression 
variable ->   identifier (	LBRACK expression ( COMMA expression)* RBRACK | DOT identifier | POINTER )* 
expression ->   simpleExpression ( (EQUAL | NOT_EQUAL | LT | LE | GE | GT | IN) simpleExpression )* 
simpleExpression ->   term ( (PLUS | MINUS | OR) term )* 
term ->   signedFactor ( (STAR | SLASH | DIV | MOD | AND) signedFactor )* 
signedFactor ->   (PLUS|MINUS)? factor 
factor ->   variable | LPAREN expression RPAREN | functionDesignator | unsignedConstant | set | NOT factor 
unsignedConstant ->   unsignedNumber | string | NIL
functionDesignator ->   identifier LPAREN parameterList RPAREN 
parameterList ->   actualParameter ( COMMA actualParameter )* 
set ->   LBRACK elementList RBRACK 
elementList ->   element ( COMMA element )* | ""
element ->   expression ( DOTDOT expression )? 
procedureStatement ->   identifier ( LPAREN parameterList RPAREN )? 
actualParameter ->   expression 
gotoStatement ->   GOTO label 
emptyStatement ->  "" 
empty ->  "" 
structuredStatement ->   compoundStatement | conditionalStatement | repetetiveStatement | withStatement 
compoundStatement ->   SBEGIN statements END 
statements ->   statement ( SEMI statement )* 
conditionalStatement ->   ifStatement | caseStatement 
ifStatement ->   IF expression THEN statement ( ELSE statement )? 
caseStatement ->   CASE expression OF caseListElement ( SEMI caseListElement )* ( SEMI ELSE statements )? END 
caseListElement ->   constList COLON statement 
repetetiveStatement ->   whileStatement | repeatStatement | forStatement 
whileStatement ->   WHILE expression DO statement 
repeatStatement ->   REPEAT statements UNTIL expression 
forStatement ->   FOR identifier ASSIGN forList DO statement 
forList ->   initialValue (TO | DOWNTO) finalValue 
initialValue ->   expression 
finalValue ->   expression 
withStatement ->   WITH recordVariableList DO statement 
recordVariableList ->   variable ( COMMA variable )* 
PLUS             ->  '+'   
MINUS            ->  '-'   
STAR             ->  '*'   
SLASH            ->  '/'   
COMMA            ->  ','   
SEMI             ->  ';'   
COLON            ->  ':'   
EQUAL            ->  '='   
NOT_EQUAL        ->  NE  
LT               ->  '<'   
GT               ->  '>'   
LPAREN           ->  '('   
RPAREN           ->  ')'   
LBRACK           ->  '['   
RBRACK           ->  ']'   
POINTER          ->  '^'   
DOT              ->  '.' 
LCURLY           ->  '{' 
RCURLY           ->  '}' 